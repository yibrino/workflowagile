# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.16
        env:
          POSTGRES_DB: exam_net
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install poetry
        run: pip install poetry
      - name: Setup env
        run: |
          cd backend
          poetry config virtualenvs.create false
          poetry install
          python manage.py migrate
        env:
          SECRET_KEY: django-insecure-%-m3e8ph3kx6btwkrn8i7$8qm#23ia(mp%qzrvvrilyik_hgy&
          POSTGRES_ENGINE: django.db.backends.postgresql
          ALLOWED_HOSTS: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: exam_net
          PG_HOST: localhost
      - name: Run tests
        run: |
          ls
          cd backend
          poetry run pytest
      - name: Calculate Code Coverage.
        run: |
            cd backend  
            poetry run coverage run --source=. -m pytest
            poetry run coverage report -m